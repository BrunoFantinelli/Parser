
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'NUMBER PLUS MINUS TIMES DIVIDE LPAREN RPAREN IF THEN ELSE WHILE EQUALS IDexpression : expression PLUS termexpression : expression MINUS termexpression : expression EQUALS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : factorfactor : IFfactor : ELSEfactor : THENfactor : WHILEfactor : NUMBERfactor : IDfactor : LPAREN expression RPAREN'
    
_lr_action_items = {'IF':([0,10,11,12,13,14,15,],[4,4,4,4,4,4,4,]),'ELSE':([0,10,11,12,13,14,15,],[5,5,5,5,5,5,5,]),'THEN':([0,10,11,12,13,14,15,],[6,6,6,6,6,6,6,]),'WHILE':([0,10,11,12,13,14,15,],[7,7,7,7,7,7,7,]),'NUMBER':([0,10,11,12,13,14,15,],[8,8,8,8,8,8,8,]),'ID':([0,10,11,12,13,14,15,],[9,9,9,9,9,9,9,]),'LPAREN':([0,10,11,12,13,14,15,],[10,10,10,10,10,10,10,]),'$end':([1,2,3,4,5,6,7,8,9,17,18,19,20,21,22,],[0,-4,-7,-8,-9,-10,-11,-12,-13,-1,-2,-3,-5,-6,-14,]),'PLUS':([1,2,3,4,5,6,7,8,9,16,17,18,19,20,21,22,],[11,-4,-7,-8,-9,-10,-11,-12,-13,11,-1,-2,-3,-5,-6,-14,]),'MINUS':([1,2,3,4,5,6,7,8,9,16,17,18,19,20,21,22,],[12,-4,-7,-8,-9,-10,-11,-12,-13,12,-1,-2,-3,-5,-6,-14,]),'EQUALS':([1,2,3,4,5,6,7,8,9,16,17,18,19,20,21,22,],[13,-4,-7,-8,-9,-10,-11,-12,-13,13,-1,-2,-3,-5,-6,-14,]),'RPAREN':([2,3,4,5,6,7,8,9,16,17,18,19,20,21,22,],[-4,-7,-8,-9,-10,-11,-12,-13,22,-1,-2,-3,-5,-6,-14,]),'TIMES':([2,3,4,5,6,7,8,9,17,18,19,20,21,22,],[14,-7,-8,-9,-10,-11,-12,-13,14,14,14,-5,-6,-14,]),'DIVIDE':([2,3,4,5,6,7,8,9,17,18,19,20,21,22,],[15,-7,-8,-9,-10,-11,-12,-13,15,15,15,-5,-6,-14,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,10,],[1,16,]),'term':([0,10,11,12,13,],[2,2,17,18,19,]),'factor':([0,10,11,12,13,14,15,],[3,3,3,3,3,20,21,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','seila.py',99),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','seila.py',103),
  ('expression -> expression EQUALS term','expression',3,'p_expression_equals','seila.py',107),
  ('expression -> term','expression',1,'p_expression_term','seila.py',111),
  ('term -> term TIMES factor','term',3,'p_term_times','seila.py',115),
  ('term -> term DIVIDE factor','term',3,'p_term_div','seila.py',119),
  ('term -> factor','term',1,'p_term_factor','seila.py',123),
  ('factor -> IF','factor',1,'p_factor_if','seila.py',127),
  ('factor -> ELSE','factor',1,'p_factor_else','seila.py',131),
  ('factor -> THEN','factor',1,'p_factor_then','seila.py',135),
  ('factor -> WHILE','factor',1,'p_factor_while','seila.py',139),
  ('factor -> NUMBER','factor',1,'p_factor_num','seila.py',143),
  ('factor -> ID','factor',1,'p_factor_id','seila.py',147),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','seila.py',151),
]
